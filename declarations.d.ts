// This file contains type declarations for the Figma Plugin API\n\ndeclare const __html__: string;\n\ndeclare global {\n  // Figma Plugin API\n  const figma: PluginAPI;\n  \n  // Figma global API\n  interface PluginAPI {\n    readonly apiVersion: string;\n    readonly command: string;\n    readonly root: DocumentNode;\n    readonly currentPage: PageNode;\n    readonly fileKey: string | null;\n    readonly editorType: 'figma' | 'figjam' | 'dev';\n    readonly viewportZoom: number;\n    readonly currentUser: User | null;\n    readonly commitCount: number;\n    readonly triggerModifiers: TriggerModifiers;\n    readonly activeUsers: ActiveUser[];\n\n    closePlugin(message?: string): void;\n    notify(message: string, options?: NotificationOptions): NotificationHandler;\n    showUI(html: string, options?: ShowUIOptions): void;\n    ui: UIAPI;\n    on(type: 'selectionchange', callback: () => void): void;\n    on(type: 'currentpagechange', callback: () => void): void;\n    on(type: 'documentchange', callback: (documentChange: DocumentChange) => void): void;\n    loadAllPagesAsync(): Promise<void>;\n    root: DocumentNode;\n  }\n\n  interface DocumentNode {\n    getPluginData(key: string): string;\n    setPluginData(key: string, value: string): void;\n    name: string;\n  }\n\n  interface PageNode {\n    id: string;\n    name: string;\n  }\n\n  interface UIAPI {\n    show(): void;\n    hide(): void;\n    resize(width: number, height: number): void;\n    postMessage(pluginMessage: any): void;\n    onmessage: ((pluginMessage: any) => void) | undefined;\n  }\n\n  interface User {\n    id: string;\n    name: string;\n    photoUrl?: string;\n  }\n\n  interface ActiveUser {\n    sessionId: string;\n    user: User;\n    position?: { x: number; y: number; };\n    color?: string;\n  }\n\n  interface TriggerModifiers {\n    option: boolean;\n    shift: boolean;\n    command: boolean;\n  }\n\n  interface NotificationOptions {\n    timeout?: number;\n    error?: boolean;\n    onDequeue?: () => void;\n  }\n\n  interface NotificationHandler {\n    cancel: () => void;\n  }\n\n  interface ShowUIOptions {\n    visible?: boolean;\n    width?: number;\n    height?: number;\n    position?: { x: number; y: number; };\n  }\n\n  interface DocumentChange {\n    documentChanges: ReadonlyArray<any>;\n  }\n}